// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const createLink = `-- name: CreateLink :execlastid
INSERT INTO links (url, commentary, title, image_url) VALUES (?, ?, ?, ?)
`

type CreateLinkParams struct {
	Url        string         `json:"url"`
	Commentary string         `json:"commentary"`
	Title      sql.NullString `json:"title"`
	ImageUrl   sql.NullString `json:"image_url"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createLink,
		arg.Url,
		arg.Commentary,
		arg.Title,
		arg.ImageUrl,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links WHERE id = ?
`

func (q *Queries) DeleteLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLink, id)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, url, commentary, title, image_url FROM links WHERE id = ?
`

func (q *Queries) GetLink(ctx context.Context, id int64) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLink, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Commentary,
		&i.Title,
		&i.ImageUrl,
	)
	return i, err
}

const getLinksByURL = `-- name: GetLinksByURL :many
SELECT id, url, commentary, title, image_url FROM links WHERE url = ?
`

func (q *Queries) GetLinksByURL(ctx context.Context, url string) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getLinksByURL, url)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Commentary,
			&i.Title,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinks = `-- name: ListLinks :many
SELECT id, url, commentary, title, image_url FROM links ORDER BY id DESC
`

func (q *Queries) ListLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Commentary,
			&i.Title,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :exec
UPDATE links SET url = ?, commentary = ?, title = ?, image_url = ? WHERE id = ?
`

type UpdateLinkParams struct {
	Url        string         `json:"url"`
	Commentary string         `json:"commentary"`
	Title      sql.NullString `json:"title"`
	ImageUrl   sql.NullString `json:"image_url"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateLink,
		arg.Url,
		arg.Commentary,
		arg.Title,
		arg.ImageUrl,
		arg.ID,
	)
	return err
}
